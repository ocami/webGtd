import db from "../repository/fireBase_repository"
import dateTimeTools from '../tools/DateTime.js'

var Promise = require('es6-promise').Promise;

class AppStore {
    constructor() {
        this.userData = {
            locations: [
                {
                    id: "Rennes",
                    x: 1111,
                    y: 2222,
                    city: "Rennes",
                    created: true,
                    shortcut: true
                },
                {
                    id: "Jardin",
                    x: null,
                    y: null,
                    city: null,
                    created: true,
                    shortcut: true

                },
                {
                    id: "Bureau",
                    x: null,
                    y: null,
                    city: null,
                    created: true,
                    shortcut: false
                },
            ],
            contacts: [
                {
                    id: "Alexandre",
                    firstName: 'Le Cam',
                    lastName: 'Alexandre',
                    mail: "ocami@contact.fr",
                    tel: "07 50 32 69 97",
                    created: true,
                    shortcut: true
                },
                {
                    id: "Toto",
                    firstName: 'Toto',
                    lastName: 'Toto',
                    mail: "toto@contact.fr",
                    tel: null,
                    created: true,
                    shortcut: true

                },
                {
                    id: "Jojo",
                    firstName: 'Jojo',
                    lastName: 'Jojo',
                    mail: "jojo@contact.fr",
                    tel: null,
                    created: true,
                    shortcut: true
                },
            ]
        }
        this.receipt = {
            index: 0,
            name: 'receipt',
            toString: 'Réception',
            toSwitch: 'todo',
            acceptSwitch: {todo: 'true', done: true, incubation: true, destroy: true},
            defaultSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            currentSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            sortAsc: true,
            sortTag: 'autoTag-0',
            sortAscDefault: true,
            sortTagDefault: 'autoTag-0',
            list: []
        }
        this.todo = {
            index: 1,
            name: 'todo',
            toString: 'A faire',
            toSwitch: 'done',
            acceptSwitch: {todo: false, done: true, incubation: true, destroy: true},
            defaultSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            currentSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            sortAsc: true,
            sortTag: 'autoTag-0',
            sortAscDefault: true,
            sortTagDefault: 'autoTag-0',
            list: []
        }
        this.done = {
            index: 2,
            name: 'done',
            toString: 'Fait',
            toSwitch: 'destroy',
            acceptSwitch: {todo: true, done: false, incubation: false, destroy: true},
            defaultSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            currentSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            sortAsc: true,
            sortTag: 'autoTag-0',
            sortAscDefault: true,
            sortTagDefault: 'autoTag-0',
            list: []
        }
        this.incubation = {
            index: 3,
            name: 'incubation',
            toString: 'Incubation',
            toSwitch: 'todo',
            acceptSwitch: {todo: true, done: false, incubation: false, destroy: true},
            defaultSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            currentSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            sortAsc: true,
            sortTag: 'autoTag-0',
            sortAscDefault: true,
            sortTagDefault: 'autoTag-0',
            list: []
        }
        this.destroy = {
            index: 4,
            name: 'destroy',
            toString: 'Corbeille',
            toSwitch: 'todo',
            acceptSwitch: {todo: true, done: false, incubation: true, destroy: false},
            defaultSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            currentSearch: [
                {
                    name: 'project',
                    value: null,
                    toString: 'project',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'location',
                    value: null,
                    toString: 'Location',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'contact',
                    value: null,
                    toString: 'Contact',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'tools', value: null, toString: 'Outils', min: null, max: null, interval: false, button: false},
                {
                    name: 'priority',
                    value: null,
                    toString: 'Priorité',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {
                    name: 'duration',
                    value: null,
                    toString: 'Durée',
                    min: null,
                    max: null,
                    interval: false,
                    button: false
                },
                {name: 'date', value: null, toString: 'Date', min: null, max: null, interval: false, button: false},
            ],
            sortAsc: true,
            sortTag: 'autoTag-0',
            sortAscDefault: true,
            sortTagDefault: 'autoTag-0',
            list: []
        }
        this.data = {
            currentAction: this.todo.list[0],
            currentList: this.todo,
            currentSearch: null,
            currentUserData: 'currentUserData',
            userData: this.userData,
            option: {
                endOfDay: '18:00',
                endOfWeek: 'friday'
            },
            actions: {
                receipt: this.receipt,
                todo: this.todo,
                done: this.done,
                incubation: this.incubation,
                destroy: this.destroy,
                tags: []
            },
            control: {
                editSeen: 'todoEdit',
                menuSeen: 'todo',
                tagModalSeen: false,
                actionCreated: false,
                actionChange: false,
                currentIndex: 0,
                currentList: 'todo',
                currentSearchName: 'searchDefault',
                tagsSearch: [
                    {name: 'location', value: null, button: false},
                    {name: 'contact', value: 'Michel', button: true},
                    {name: 'tools', value: 'Ordinateur', button: false},
                    {name: 'priority', value: 1, button: false},
                    {name: 'duration', value: 10, button: false},
                    {name: 'date', value: null, button: false},
                ],
            },
            tags: [],
            autoTags: {
                createOn: {
                    position: 0,
                    name: 'createOn',
                    toString: 'Création',
                },
                updateOn: {
                    position: 1,
                    name: 'updateOn',
                    toString: 'Modification',
                },
                inListOn: {
                    position: 2,
                    name: 'inListOn',
                    toString: 'inListOn',
                }
            },
            date: {
                expiryDate: {
                    position: 5,
                    name: 'expiryDate',
                    toString: 'Date',
                    selected: '',
                    options: [
                        {text: 'Aujourd hui', value: '@today'},
                        {text: 'Demain', value: '@today'},
                        {text: 'Dans la semaine', value: '@week'},
                        {text: 'Dans le mois', value: '@month'},
                        {text: 'Dans l année', value: '@year'},
                        {text: 'Prochaine journée', value: '@nextYear'},
                        {text: 'Prochaine semaine', value: '@nextYear'},
                        {text: 'Prochain mois', value: '@nextYear'},
                        {text: 'Prochaine année', value: '@nextYear'},
                        {text: 'Lundi', value: '@nextYear'},
                        {text: 'Mardi', value: '@nextYear'},
                        {text: 'Mercredi', value: '@nextYear'},
                        {text: 'Jeudi', value: '@nextYear'},
                        {text: 'Vendredi', value: '@nextYear'},
                        {text: 'Samedi', value: '@nextYear'},
                        {text: 'Dimanche', value: '@nextYear'},
                        {text: '+', value: '+'},
                    ]
                },
                expiryTime: {
                    position: 6,
                    name: 'expiryTime',
                    toString: 'Heure',
                    selected: '',
                    options: [
                        {text: '+', value: 'Tel'},
                    ]
                },
            },
            test: 'test'
        }
        this.ca = this.data.currentAction
        this.cl = this.data.currentList
    }

    init() {
        console.log('> app_store/init')
        this.data.control.editSeen = 'hello'
        this.data.currentList = this.data.actions.todo
        this.data.currentAction = this.newAction('todo')
        db.actionsImport()
        db.tagsImport()
    }

    /*------------------------------------------------------------------!!!CURRENT!!!!---------------------------------*/


    /*--------------------------------------------------------------------USERDATA------------------------------------*/
    setCurrentUserData(dataName) {
        console.log('> app_store/setCurrentUserData')
        let value = this.getOnceActionTag(dataName).value

        if (!value) {
            this.data.currentUserData = this.newUserData(dataName)
            return
        }

        db.getUserData(dataName, value)
    }

    newUserData(dataName) {
        console.log('> app_store/newUserData')
        switch (dataName) {

            case 'contact' :
                return new Contact()

            case 'location':
                return new Location()
        }
    }

    createUserData(typeOfData) {
        console.log('> app_store/createUserData2!!!!!')
        console.log(typeOfData)
        console.log(this.data.currentUserData)

        let userData = this.data.currentUserData

        //change tag value of current action
        let actionTag = this.getOnceActionTag(typeOfData)
        actionTag.value = userData.id
        actionTag.button = true
        this.actionUpdate()

        //change options tag of app
        let appTagList = this.getOnceSelectTag(typeOfData)

            //parse promise
            let sailNames = [];
            $.each(appTagList.options, function (i, names) {
                sailNames.push(names);
            });
            appTagList.options = sailNames;

        if(!userData.created)
            appTagList.options.push({text: userData.id, value: userData.id, shortcut: userData.shortcut})
        else
            this.shortcutChange(typeOfData,userData)

        var compare = function (ascending) {
            return function (a, b) {
                if (a.value === "+") {
                    return 1;
                }
                else if (b.value === "+") {
                    return -1;
                }
                else if (a.value === b.value) {
                    return 0;
                }
                else if (ascending) {
                    return a.value < b.value ? -1 : 1;
                }
                else if (!ascending) {
                    return a.value < b.value ? 1 : -1;
                }
            };
        }
        appTagList.options.sort(compare(true))

        db.updateAppTagOption(appTagList)

        //createUserData : location || contact
        userData.created = true
        db.addUserData(typeOfData, userData)
    }
    /*---------------------------------------------------------------------SETTER-------------------------------------*/

    setCurrentAction(currentAction) {
        console.log('> app_store/setCurrentAction')
        this.data.currentAction.isActive = false
        this.data.currentAction = currentAction
        this.data.currentAction.isActive = true
    }

    setCurrentList(listName) {
        console.log('> app_store/setCurrentList')
        this.data.control.currentList = listName
        return this.getList()
    }

    /*---------------------------------------------------------------------GETTER-------------------------------------*/

    getList(listName) {
        let a = this.data.actions

        if (!listName)
            return this.data.currentList

        switch (listName) {
            case 'receipt':
                return a.receipt;

            case 'todo':
                return a.todo;

            case 'done':
                return a.done;

            case 'incubation':
                return a.incubation;

            case 'destroy':
                return a.destroy;

            default :
                console.log('actions.js getList error')
        }
    }

    getOnceSelectTag(tagName) {
        return this.data.tags.find(function (obj) {
            return obj.name === tagName
        })
    }

    getOnceSelectTagOption(tagName, optionValue) {
        let selectTag = this.getOnceSelectTag(tagName)
        return selectTag.options.find(function (obj) {
            return obj.value === optionValue
        })
    }

    getOnceActionTag(tagName, action) {
        if (!action)
            action = this.data.currentAction

        return action.tags.find(function (obj) {
            return obj.name === tagName
        })
    }

    getOnceSearchTag(tagName) {
        return this.data.currentList.currentSearch.find(function (obj) {
            return obj.name === tagName
        })
        // return this.data.control.tagsSearch.find(function (obj) { return obj.name === tagName })
    }

    /*--------------------------------------------------------------------CHANGE-VUE----------------------------------*/
    setMenuSeen(listName) {
        console.log('> app_store/setMenuSeen')
        this.data.currentList = this.getList(listName)
        let cl = this.data.currentList

        this.data.control.menuSeen = listName

        if (cl.list.length <= 0) {
            this.data.control.editSeen = 'empty'
            return
        }

        this.data.control.editSeen = 'edit'
        this.setCurrentAction(cl.list[0])
    }

    actionAddSeen() {
        console.log('> app_store/actionAddSeen')

        this.data.currentAction.isActive = false
        this.data.control.editSeen = 'edit'
        this.data.control.actionCreated = true
        this.data.currentAction = this.newAction(this.data.currentList.name)
    }

    /*---------------------------------------------------------------------ACTIONS------------------------------------*/
    speedAdd(content) {
        console.log('> app_store/speedAdd')

        let name = AppStore.generateName(content)
        let ca = this.newAction('receipt')
        ca.name = name
        ca.content = content

        this.data.actions.receipt.list.push(ca)
        db.addAction(ca)
    }

    actionEdit(index) {
        console.log('> app_store/actionEdit')

        let list = this.data.currentList.list

        this.data.currentAction.isActive = false

        if(!list.length){
            this.data.control.editSeen = 'empty'
            return
        }

        this.data.currentAction = list[index]
        this.data.currentAction.isActive = true

        this.data.control.currentIndex = index
        this.data.control.editSeen = 'edit'
    }

    finishEditAction() {
        console.log('> app_store/finishEditAction')

        switch (this.data.control.currentSearchName){
            case 'searchAll' :
                this.searchAll()
                break

            case 'searchDefault' :
                this.searchDefault()
                break

            case 'searchEdit' :
                this.searchEdit()
                break
        }
    }

    inputChange(event, isTextarea) {
        console.log('> app_store/inputChange')

        if (this.data.control.actionCreated) {
            if (!event.target.value)
                return

            if (isTextarea)
                if (!this.data.currentAction.name)
                    this.data.currentAction.name = AppStore.generateName(this.data.currentAction.content)

            this.actionAdd()
        } else {
            this.actionUpdate()
        }
    }

    actionTagChange(tag, tagValue, currentSelect) {
        console.log('> app_store/actionTagChange')

        isNaN(Number(tagValue)) ? tagValue : tagValue = Number(tagValue)
        tagValue === 'null' ? tagValue = null : tagValue
        currentSelect.value = tagValue
        if (tag.modal === true)
            currentSelect.button = true

        this.actionUpdate()
    }

    switch(newListName, listName, index) {
        console.log('> app_store/switch')

        if (!listName)
            listName = this.getList()

        if (!index)
            index = this.data.control.currentIndex

        let list = this.getList(listName).list
        let newList = this.getList(newListName).list
        this.data.currentAction.isActive = false
        this.data.currentAction = list[index]
        this.data.currentAction.status = newListName
        this.setInListOn()
        newList.push(this.data.currentAction)
        list.splice(index, 1)

        db.switch(newListName, listName, this.data.currentAction)

        let i = 0;
        let l = list.length;
        if (l) {
            index < l ? i = index : i = index - 1;
            this.actionEdit(i)
        } else
            {
            this.data.control.editSeen = 'empty'
        }
    }

    actionAdd() {
        console.log('> app_store/actionAdd')

        this.data.control.currentIndex = this.data.currentList.list.push(this.data.currentAction) - 1
        this.data.control.actionCreated = false

        db.addAction(this.data.currentAction)

        this.data.currentAction.isActive = true
    }

    actionUpdate() {
        let ca = this.data.currentAction

        db.updateAction(ca)
        this.setUpdateOn()
    }

    newAction(status) {
        let time = new Date().getTime()
        return {
            id: this.guid(),
            name: '',
            content: '',
            dateTime: {
                date: null,
                time: this.data.option.endOfDay,
                minutes: null,
                expiry: true,
                toString: null
            },
            status: status,
            isActive: false,
            visible: true,
            tags: [
                {name: 'project', value: null, button: false},
                {name: 'location', value: null, button: false},
                {name: 'contact', value: null, button: false},
                {name: 'tools', value: null, button: false},
                {name: 'priority', value: null, button: false},
                {name: 'duration', value: null, button: false},
                {name: 'date', value: null, button: false},
            ],
            autoTags: [time, time, time]
        }

    }

    /*---------------------------------------------------------------------AUTO-TAGS----------------------------------*/
    setUpdateOn() {
        console.log('> app_store/setUpdateOn')
        let array = this.data.currentAction.autoTags.slice()
        array[1] = new Date().getTime()
        this.data.currentAction.autoTags = array
    }

    setInListOn() {
        console.log('> app_store/setInListOn')
        let array = this.data.currentAction.autoTags.slice()
        array[2] = new Date().getTime()
        console.log(array)
        this.data.currentAction.autoTags = array
    }

    /*---------------------------------------------------------------------APP-SELECT-TAG---------------------------------*/
    deleteActionTag(tagName) {
        console.log('> app_store/deleteActionTag')
        let actionLocation = this.getOnceActionTag(tagName)
        actionLocation.value = null
        actionLocation.button = false
        this.actionUpdate()
    }

    shortcutChange(tagName, userData) {
        console.log('>app_store/shortcutChange')
        let dt = this.getOnceSelectTag(tagName)
        let option = dt.options.find(function (obj) {
            return obj.value === userData.id
        })
        option.shortcut = userData.shortcut
    }


    /*---------------------------------------------------------------------TAGS-SEARCH--------------------------------*/
    searchAll() {
        console.log('> app_store/searchAll')
        this.data.control.currentSearchName = 'searchAll'


        let actions = this.getList().list.slice()
        for (var i = 0; i < actions.length; i++) {
            actions[i].visible = true
        }
        this.sortByTag('autoTag-0', true)

        this.actionEdit(0)
    }

    searchDefault() {
        console.log('> app_store/searchDefault')
        this.data.control.currentSearchName = 'searchDefault'

        let cl = this.data.currentList
        let list = cl.list

        this.tagsCompare(cl.defaultSearch)
        this.sortByTag(cl.sortTagDefault, cl.sortAscDefault)

        //editSenn empty if no result
        for (var i = 0; i < list.length; i++) {
            console.log(list[i].name+' / '+list[i].visible)
            if (this.data.currentList.list[i].visible === true) {
                this.actionEdit(i)
                return
            }
            this.data.control.editSeen = 'empty'
        }
    }

    searchEdit() {
        console.log('> app_store/searchEdit')
        this.data.control.currentSearchName = 'searchEdit'

        this.tagsCompare()
        this.data.control.editSeen = 'search'
        this.data.currentAction.isActive = false
    }

    tagsCompare(search) {
        console.log('> app_store/tagsCompare')

        let cl = this.data.currentList
        let actions = cl.list.slice()

        if (!search)
            search = cl.currentSearch

        for (let i = 0; i < actions.length; i++)
            actions[i].visible = this.arrayCompare(actions[i], search)

        cl.list = actions;
    }

    setDefaultSearch() {
        console.log('> app_store/setDefaultSearch')
        let cl = this.data.currentList
        let clCs = cl.currentSearch
        let clDs = cl.defaultSearch
        /*        for (let i=0;i<list.currentSearch.length;i++)
                    list.defaultSearch[i].value = list.currentSearch[i].value*/

        for (let i = 0; i < clCs.length; i++) {
            clDs[i].name = clCs[i].name
            clDs[i].value = clCs[i].value
            clDs[i].min = clCs[i].min
            clDs[i].max = clCs[i].max
            clDs[i].interval = clCs[i].interval
        }

        cl.sortTagDefault = cl.sortTag
        cl.sortAscDefault = cl.sortAsc

        db.setDefaultSearch(cl.name, cl.sortTag, cl.sortAsc, clDs)
    }

    intervalSearch() {
        let cs = this.data.currentSearch
        cs.value = null
        cs.interval = true
        cs.button = cs.toString + ': '
        if (cs.min)
            cs.button += cs.min
        cs.button += ' > '
        if (cs.max)
            cs.button += cs.max

        this.data.currentSearch = null
        this.tagsCompare()
    }

    intervalSearchDestroy() {
        let cs = this.data.currentSearch
        cs.interval = false
        cs.button = false
        this.data.currentSearch = null
        this.tagsCompare()
    }

    tagsEmpty() {
        console.log('> app_store/tagsEmpty')
        let array = this.getList().currentSearch.slice()
        let actions = this.getList().list.slice()

        for (var i = 0; i < array.length; i++) {
            array[i].value = null
            array[i].button = false
            array[i].interval = null
            array[i].min = null
            array[i].max = null
        }

        for (var i = 0; i < actions.length; i++) {
            actions[i].visible = true
        }

        this.getList().currentSearch = array;
        this.getList().list = actions;
    }

    arrayCompare(currentAction, search) {
        console.log('> app_store/arrayCompare')

        for (var i = 0; i < search.length; i++) {
            let tagName = search[i].name
            let value = search[i].value
            let actionTagValue = this.getOnceActionTag(tagName, currentAction).value

            if (search[i].interval)
                if (!this.arrayIntervalCompare(search[i], actionTagValue))
                    return false

            if (value)
                if (value !== actionTagValue)
                    return false
        }
        return true
    }

    arrayIntervalCompare(searchTag, actionTagValue) {
        console.log('> app_store/arrayIntervalCompare')

        let min = searchTag.min
        let max = searchTag.max

        if (min && max)
            if (actionTagValue >= min && actionTagValue <= max)
                return true

        if (min && !max)
            if (actionTagValue >= min)
                return true

        if (!min && max)
            if (actionTagValue <= max)
                return true

        return false
    }

    /*---------------------------------------------------------------------TAGS-SORT----------------------------------*/

    //init
    getSortFilters() {
        console.log('> app_store/getSortFilters')

        let options = []

        Object.entries(this.data.tags).forEach(([key, value]) => {
            options.push({text: value.toString, value: 'tag-' + value.name})
        });

        Object.entries(this.data.autoTags).forEach(([key, value]) => {
            options.push({text: value.toString, value: 'autoTag-' + value.position})
        });

        return options
    }

    //event
    sortTagChange(tag) {
        console.log('> app_store/sortTagChange')
        let asc = this.getList().sortAsc

        this.getList().sortTag = tag
        this.sortByTag(tag, asc)
    }

    sortAscChange(asc) {
        console.log('> app_store/sortAscChange')
        let tag = this.getList().sortTag
        this.getList().sortAsc = asc
        this.sortByTag(tag, asc)
    }

    //function
    sortByTag(tag, ascending) {
        console.log('> app_store/sortByTag')

        tag = tag.split("-")
        let currentList = this.getList()
        let actions = currentList.list.slice()
        let tagName = tag[1]

        if (tag[0] === 'tag') {
            let tagsCompare = function (ascending) {
                return function (a, b) {
                    let indexA = a.tags.map(function (e) {
                        return e.name
                    }).indexOf(tagName)
                    let indexB = b.tags.map(function (e) {
                        return e.name
                    }).indexOf(tagName)

                    if (!a.tags[indexA].value) {
                        return 1;
                    }
                    else if (!b.tags[indexB].value) {
                        return -1;
                    }
                    else if (a.tags[indexA].value === b.tags[indexB].value) {
                        return 1;
                    }
                    else if (ascending) {
                        return a.tags[indexA].value < b.tags[indexB].value ? -1 : 1;
                    }
                    else if (!ascending) {
                        return a.tags[indexA].value < b.tags[indexB].value ? 1 : -1;
                    }
                };
            }
            currentList.list = actions.sort(tagsCompare(ascending))
        }

        if (tag[0] === 'autoTag') {
            let tagsCompare = function (ascending) {
                let index = tag[1]
                return function (a, b) {
                    if (a.autoTags[index] === b.autoTags[index]) {
                        return 0;
                    }
                    else if (ascending) {
                        return a.autoTags[index] < b.autoTags[index] ? -1 : 1;
                    }
                    else if (!ascending) {
                        return a.autoTags[index] < b.autoTags[index] ? 1 : -1;
                    }
                };
            }
            currentList.list = actions.sort(tagsCompare(ascending))
        }
    }

    /*-----------------------------------------------------------------------DATE-------------------------------------*/

    dateManualEdit() {
        console.log('> app_store/dateManualEdit')
        let dt = this.data.currentAction.dateTime
        let tag = this.getOnceActionTag('date')
        dt.minutes = parseToMinutes(dt.date, dt.time)
        tag.value = dt.date
        tag.button = true
    }



























    dateManualAuto(value) {
        console.log('> app_store/dateManualAuto')
        console.log(value)
        dateTimeTools.dateTimeTest()
    }




























    dateAutoEdit(tagValue, tagPosition, tagName) {
        console.log('> app_store/dateAutoEdit')
        let currentAction = this.data.currentAction

        currentAction.dateTime.date = '20180830'
    }

    predateManualEdit() {
        console.log('> app_store/predateManualEdit')
        let t = this.data.currentAction.dateTime.time

        t ? t : this.data.currentAction.dateTime.time = this.data.option.endOfDay
    }

    dateTimeRefresh() {
        console.log('> app_store/dateTimeRefresh')
        this.data.currentAction.dateTime = {
            date: null,
            time: null,
            minutes: null,
            expiry: true,
            toString: null
        }
    }

    getTodayDate() {
        return todayDate()
    }

    /*-----------------------------------------------------------------------TOOLS------------------------------------*/
    static generateName(content) {
        console.log('> app_store/generateName')
        let firstLine = content.match(/[^\r\n]+/g);
        let name = firstLine[0].substring(0, 20)

        if (name.length < firstLine[0].length)
            name = name + '...'

        return name
    }

    guid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

    /*---------------------------------------------------------------------ATTENTE------------------------------------*/

    /*    actionSearch () {
        console.log('> app_store/actionSearch')

        this.data.control.editSeen = 'actionSearch'
        this.data.currentAction.isActive = false
    }

    actionTagSelect (tagValue,position){
        console.log('> app_store/actionTagSelect')

        let currentAction  = this.data.action

        let array = action.tags.slice(0)
        array[position] = tagValue;
        this.data.action.tags = array;

        this.setUpdateOn()
    }

    preModal(tagName){
        console.log('> appStore/preModal')
        if (tagName === 'date'){
            let dt = this.data.action.dateTime
            console.log(dt)
            if(!dt.date)
                dt.date = todayDate()

            if(!dt.time)
                dt.time = this.data.option.endOfDay
        }
    }

    test(){
        console.log('-------TRUE------------')
        console.log('1 '+ this.arrayCompare(['','','',''],['','','','']))
        console.log('1 '+ this.arrayCompare(['popo','papa','pipi'],['','','','']))
        console.log('1 '+ this.arrayCompare(['','papa',''],['','','','']))
        console.log('2 '+ this.arrayCompare(['popo','papa','pipi'],['popo','papa','pipi']))
        console.log('3 '+ this.arrayCompare(['popo','papa','pipi'],['popo','papa','']))
        console.log('4 '+ this.arrayCompare(['popo','papa','pipi'],['popo','','']))

        console.log('5 '+ this.arrayCompare(['popo','',''],['popo','','']))
        console.log('6 '+ this.arrayCompare(['','papa','pipi'],['','papa','']))
        console.log('7 '+ this.arrayCompare(['','papa','pipi'],['','papa','pipi']))

        console.log('8 '+ this.arrayCompare(['popo','ff','ddd','eee','dezf','czdvrever'],['popo','','','','','']))
        console.log('9 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['popo','','','','papa','']))

        console.log('10 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['popo','ff','ddd','eee','papa','czdvrever']))
        console.log('11 '+ this.arrayCompare(['popo','ff','ddd','eee','papa',''],['popo','ff','ddd','eee','papa','']))
        console.log('12 '+ this.arrayCompare(['popo','ff','ddd','','papa',''],['popo','ff','ddd','','papa','']))



        console.log('-------FALSE------------')
        console.log('1 '+ this.arrayCompare(['','','pipi'],['','roro','']))
        console.log('1 '+ this.arrayCompare(['popo','papa','pipi'],['roro','rara','riri']))

        console.log('2 '+ this.arrayCompare(['popo','papa','pipi'],['popo','papa','riri']))
        console.log('3 '+ this.arrayCompare(['popo','papa','pipi'],['popo','rara','']))
        console.log('4 '+ this.arrayCompare(['popo','papa','pipi'],['roro','','',]))

        console.log('5 '+ this.arrayCompare(['popo','ff','ddd','eee','dezf','czdvrever'],['papa','','','','','','']))
        console.log('6 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['popo','','','','rara','']))
        console.log('7 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['popo','ff','ddd','eee','rara','czdvrever']))
        console.log('8 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['popo','zz','ddd','eee','','czdvrever']))
        console.log('9 '+ this.arrayCompare(['popo','ff','ddd','eee','papa','czdvrever'],['roro','ff','ddd','eee','papa','czdvrever']))
    }*/

    /*--------------------------------------------------------------------Location------------------------------------*/
    refreshLocationFeatures() {
        console.log('> app_store/refreshLocationFeatures')
        return new LocationFeatures()
    }
}

export default new AppStore();

/*-------------------------------OBJECTS---------------------------*/
function Location() {
    this.id = ""
    this.created = false
    this.shortcut = true
    this.features = new LocationFeatures()
}

function LocationFeatures() {
    this.idApi = null
    this.city = null
    this.citycode = null
    this.postCode = null
    this.address = null
    this.x = 0
    this.y = 0
}

function Contact() {
    this.id = ""
    this.firstName = ""
    this.lastName = ""
    this.tel = ""
    this.created = false
    this.shortcut = true
}

/*-------------------------------TOOLS---------------------------*/
function parseToMinutes(dateStr, timeStr) {
    const [day, month, year] = dateStr.split("/")
    const [hour, minute] = timeStr.split(":")
    return new Date(year, month - 1, day, hour, minute).getTime() / 10000
}

function todayDate() {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!
    var yyyy = today.getFullYear();

    if (dd < 10) {
        dd = '0' + dd
    }

    if (mm < 10) {
        mm = '0' + mm
    }
    today = dd + '/' + mm + '/' + yyyy;

    return today;
}

function loadDistantFile(url) {
    return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();

        xhr.onload = function (event) {
            resolve(xhr.responseText); // Si la requête réussit, on résout la promesse en indiquant le contenu du fichier
        };

        xhr.onerror = function (err) {
            reject(err); // Si la requête échoue, on rejette la promesse en envoyant les infos de l'erreur
        }

        xhr.open('GET', url, true);
        xhr.send(null);
    });
}